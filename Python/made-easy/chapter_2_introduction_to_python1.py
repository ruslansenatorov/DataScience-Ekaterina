# ---
# jupyter:
#   jupytext:
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.5'
#       jupytext_version: 1.16.4
# ---

"""Introduction to Python."""

# 1. Что такое Python?
#
# Python - это бесплатный интерпретируемый высокоуровневый язык
# программирования общего назначения с открытым исходным кодом.
# Python был создан Гвидо ван Россумом и впервые выпущен в 1991 r. 
# Он поддерживает несколько парадигм программирования, включая структурное 
# (особенно процедурное) объектно-ориентированное и функциональное программирование.
# Его языковые конструкции и объектно-ориентированный подход позволяют 
# программистам писать понятный и логичный код в рамках как небольших, так и крупно
# масштабных проектов.
# Python - это простой в освоении и очень мощный язык программирования. 
# Элегантный синтаксис и динамическая типизация Python вместе с его
# интерпретируемостью делают его идеальным языком для написания сценариев и
# быстрой разработки приложений во многих областях и на множестве платформ.
#
# Самыми популярными языками программирования
# для специалистов по данным являются:
# 1. Python 
# 2. С++
# 3. R 
# 4. Java
# 5. SQL 
# 6. Matlab
# Преимущества Python:
# ♦ Это один из самых популярных языков программирования, прочно вошедший
# в индустрию разработки программного обеспечения.
# ♦ Занимает первое место среди языков-аналогов согласно рейтингам из открытых
# источников или статей по языкам программирования.
# ♦ Стабильно популярный, а еще лучше с растущей популярностью.
# ♦ У языка есть большой набор библиотек, инструменты, фреймворки и большое
# сообщество, которое вносит свой вклад в развитие языка.
# ♦ Язык хорошо востребован на рынке труда и позволяет получать хорошую зар-
# плату.
# Кроме того, Python гибок в настройке и может быть расширен
# на другие платформы. В автономном виде это довольно мощный язык для решения
# множества задач. У Python открытый исходный код, и он широко используется.
# Модули и библиотеки находятся в свободном доступе, и их число растет с каждым
# днем.
# Python также очень хорошо приспособлен для решения задач интеллектуального
# анализа данных, аналитики данных и машинного обучения. Возможности языка
# программирования в сочетании с модулями анализа данных делают его мощным
# оружием в арсенале любого аналитика.
#
# 2. Появление Python
# Язык Python был придуман в конце 1980-х rr. Гвидо ван Россумом, сотрудником
# Centrum Wiskunde & Infonnatica (CWI) в Нидерландах, как преемник языка АВС.
# Его реализация началась в декабре 1989 г. Ван Россум был ведущим разработчиком
# Python до 1 2 июля 20 1 8 г., после чего ушел в «отпуск на неопределенный срок» и
# 16 октября 2000 r. был выпущен Python 2.0, в котором появилось множество новых
# базовых функций, включая сборщик мусора с обнаружением циклических ссылок и
# поддержку Unicode.
# 3 декабря 2008 r. был выпущен Python 3 .0. Это была сильно измененная версия
# языка, не имеющая полной обратной совместимости. 
# Кстати, язык назван в честь шоу на канале ВВС «Летающий цирк Монти Пайтона»
# (Monty Python's Flying Circus) и со змеями никак не связан. Ссылки на скетчи 
# Монти Пайтона в документации не только разрешены, но и приветствуются! 
#
# 3. Python и другие языки программирования
# Python проще в использовании, доступен в операционных системах Windows, MacOS и
# UNIX и позволяет выполнить работу быстрее.
# Python прост в использовании, но при этом это настоящий язык программирования,
# в котором есть гораздо более мощный инструментарий для создания больших программ, 
# чем могут предложить shell-скрипты или Ьаt-файлы. С другой стороны, 
# в Python также реализовано больше проверок ошибок, чем в С, и, как в любом языке
# высокого уровня, в нем есть встроенные высокоуровневые типы данных, такие как 
# гибкие массивы и словари. 
# Python позволяет разделять программу на модули, которые можно повторно
# использовать в других программах на Python. В нем есть большой встроенный набор
# стандартных модулей, которые можно использовать в качестве основы для своих
# программ или в качестве примеров для начала обучения программированию на
# Python. В этих модулях реализован файловый ввод-вывод, системные вызовы, сокеты,
# а также инструменты для создания графических пользовательских интерфейсов,
# такие как Tkinter.
# Python - это интерпретируемый язык, позволяющий значительно сэкономить время.
# Интерпретатор можно использовать в интерактивном режиме, что позволяет легко
# экспериментировать с функциями языка, писать одноразовые программы или
# тестировать функции во время нисходящей разработки программы.
# А еще это удобный настольный калькулятор.
# Python позволяет писать программы компактно и читабельно. Программы, написанные 
# на Python, обычно намного короче таких же программ на С, С++ или Java
# по нескольким причинам.
# ♦ Типы данных высокого уровня позволяют записывать сложные операции в одну
# строку.
# ♦ Группировка операторов выполняется с помощью отступов, а не с помощью
# скобок в начале и конце блока.
# ♦ Объявление переменных или аргументов не требуется.
# Python является расширяемым: если вы знаете язык С, то можете добавить в 
# интерпретатор новую встроенную функцию или модуль, который бы выполнял важные
# с точки зрения производительности части кода с максимальной скоростью или
# связывал программы на Python с библиотеками, доступными в двоичной форме
# (например, графическими библиотеками конкретного производителя). После 
# подключения вы можете связать интерпретатор Python с приложением, написанным на
# С, и использовать его как расширение или командный язык для этого приложения.
#
# Основная философия языка кратко изложена в документе Zen of Python1 , в котором
# можно найти такие афоризмы, как:
# ♦ Красивое лучше, чем уродливое.
# ♦ Явное лучше, чем неявное.
# ♦ Простое лучше, чем сложное.
# ♦ Сложное лучше, чем запутанное.
# ♦ Читаемость имеет значение.
#
# 4. Преимущества Python по сравнению с другими языками
# 4.1 . Простота
# Python по простоте напоминает «дисциплинированный английский». То есть это не
# какой-то чужеродный язык, который нормальный человек не может понять. Но в то
# же время для его применения требуется некоторая дисциплина. Чтение кода на
# Python похоже на чтение на английском. Простота - одна из основных сильных
# сторон Python. Это позволяет нам больше сосредоточиться на решении, а не на
# синтаксисе языка программирования. 
# 4.2. Свободный и открытый исходный код
# Python распространяется бесплатно. Как мы увидим в процессе загрузки и 
# установки Python, все делается совершенно бесплатно. И не будет никаких скрытых 
# платежей за использование или распространение вашей работы.
# Python распространяется по модели FLOSS (Free/Libre and Open Source Software).
# Проще говоря, вы можете открыто распространять дубликаты этого продукта, читать
# его исходный код, вносить в него изменения и использовать его в бесплатных
# проектах. Есть целое сообщество FLOSS, которое взаимодействует между собой и
# обменивается информацией. Это одна из причин, почему Python нам подходит, -
# этот язык был создан и постоянно совершенствуется сообществом, которое желает
# сделать его как можно лучше.
# 4.3. Высокоуровневость
# Язык программирования высокого уровня - это язык, в котором вам не приходится
# думать о множестве деталей, которые нужны при использовании языка 
# программирования низкого уровня. Например, в Python не приходится беспокоиться
# об управлении памятью, используемой вашей программой. Проще говоря, языки
# низкого уровня ближе к аппаратному обеспечению, чем языки программирования
# высокого уровня, которые ближе к человеческим языкам.
# 4.4. Портативность
# Портативность означает, что Python можно использовать на разных типах машин,
# независимо от аппаратных средств или ограничений операционной системы. 
# Благодаря открытому исходному коду Python был перенесен на многие платформы,
# и его можно использовать в Windows, GNU/Linux, Macintosh, Solaris, Palm OS,
# PlayStation, Sharp Zaurus, Windows СЕ и PocketPC !
# 4.5. Интерпретируемость
# Когда вы пишете программу на языке С или С++, она преобразуется из исходного
# языка, т. е. из кода на С или С++, в машинный код (состоящий из О и 1 ), 
# потому что именно такой язык понимает компьютер. Этот процесс выполняется 
# с помощью компилятора. Когда программа запускается, программное обеспечение
# компоновщика копирует программу в память и запускает ее.
# Python не требует компиляции в двоичный код, а ваша программа запускается 
# прямо из исходного кода. Внутри Python преобразует исходный код в
# промежуточную форму, называемую байт-кодами, затем переводит ее на родной
# язык компьютера и запускает.
# Python - это самый быстроразвивающийся язык программирования в 2020 году,
# поэтому недостатка в интерпретаторах у него нет. 
# 4.5.1. Интерпретаторы Python 
# Что такое интерпретатор?
# По определению интерпретатор - это разновидность компьютерной программы,
# которая непосредственно выполняет инструкции, написанные на каком-либо языке
# программирования или языке сценариев. Под непосредственным выполнением
# подразумевается, что предварительная компиляция кода в программу на машинном
# языке не требуется.
# Когда вы устанавливаете Python, с ним также устанавливается интерпретатор
# по умолчанию. Вы можете запустить интерпретатор по умолчанию, набрав команду 
# python в командной строке вашего компьютера. После загрузки интерпретатора
# код на Python можно выполнять в командной строке. Этот интерпретатор 
# используется по умолчанию, но у него есть свои ограничения. Например, в 
# нем нет отступов, выделения синтаксиса цветом, дополнения табуляции и
# многого другого, что есть в других интерпретаторах.
# IPython - это альтернативный интерпретатор Python. Это интерактивная оболочка,
# которая используется для вычислений на Python. В ней гораздо больше полезных
# функций по сравнению с интерпретатором Python, используемым по умолчанию.
# В комплекте с IPython идет редактор Jupyter Notebook - один из наиболее часто
# используемых начинающими программистами инструментов.
# CPython
# Это стандартная и наиболее широко используемая реализация языка программирования
# Python. Написанный на С и Python, интерпретатор CPython содержит много внешних
# функций С и связан с другими языками программирования.
# CPython можно в какой-то степени считать компилятором, поскольку перед 
# интерпретацией он преобразует код Python в байт-код. В нем используется GIL
# (глобальная блокировка интерпретатора), которая ограничивает возможности
# интерпретатора, поскольку она отключает параллельные потоки Python в 
# рамках одного процесса. 
# CPython - единственный вариант использования пакетов Python, которому для
# правильной работы нужны расширения С. 
# lronPython
# IronPython - это реализация языка программирования Python для платформы .NET,
# в которой используются библиотеки Python и .NET. Этот интерпретатор может
# предоставлять код Python другим языкам, относящимся к платформе .NET.
# (Поддержка - до Python 2. 7)
# В IronPython есть поддержка динамической компиляции и встроенная интерактив
# ная консоль. Использование интерпретатора Python позволяет скриптам Python
# взаимодействовать с объектами .NET. IronPython напрямую интегрируется в среду
# разработки Visual Studio.
# Jython
# Ранее известная как JPython, реализация Jython работает на платформе Java.
# Это сочетание Java и Python преобразует код Python в байт-код Java и, 
# следовательно, позволяет запускать код Python на любой машине, на которой
# установлена JVМ.
# Jython обеспечивает поддержку как статической, так и динамической компиляции.
# Важной особенностью этого интерпретатора Python является то, что он позволяет
# импортировать, а также использовать любые классы Java так, словно это модуль 
# Python.
# РуРу
# РуРу - это быстрая и совместимая альтернативная реализация языка программирования
# Python. Этот интерпретатор Python реализован в RPython, который представляет
# собой ограниченное статически типизированное подмножество языка программирования
# Python. Благодаря ЛТ-компилятору РуРу поддерживает серверные части С, CLI и JVM.
# Основная цель РуРу - обеспечить максимальную совместимость с эталонной 
# реализацией CPython и в то же время увеличить производительность.
# РуРу используется разработчиками Python, которые хотят увеличить 
# производительность некоторых видов кода Python. 
# PythonNet
# PythonNet позволяет выполнить почти бесшовную интеграцию Python с .NET CLR.
# Подход этого интерпретатора можно считать противоположным тому, которому 
# следует lronPython. При использовании вместе с Mono, PythonNet позволяет 
# встроенным в операционные системы установкам Python (кроме Windows) работать 
# в среде .NET. PythonNet можно использовать совместно с IronPython без
# каких-либо проблем.
# Stackless Python
# CPython и другие популярные интерпретаторы Python для управления стеком используют 
# язык С. Но к интерпретатору Stackless Python это не относится. Хотя в Stackless
# Python используется стек С, между вызовами функций он очищается. Следовательно,
# интерпретатор Python в работе со стеком не зависит от вызова С. Как и CPython,
# Stackless Python написан с использованием С и Python. Помимо поддержки потоков,
# у Stackless Python есть поддержка каналов связи, сопрограмм, предварительно 
# скомпилированных двоичных файлов, циклического планирования, сериализации задач
# и тасклетов.
# Возможно, самая важная особенность Stackless Python - это наличие микропотоков.
# Эта возможность помогает избежать значительной части накладных: расходов,
# связанных с обычными потоками операционной системы.
# 4.6. Объектная ориентированность
# Python поддерживает процедурно-ориентированное программирование, а также
# объектно-ориентированное программирование. В процедурно-ориентированных:
# языках программа состоит из процедур или функций, в которых заключены 
# многократно используемые части программы. В объектно-ориентированных языках 
# программа построена на объектах, которые включают в себе данные и 
# функциональность. 
# 4.7. Расширяемость 
# Если в коде есть критический фрагмент, от которого зависит быстродействие, или
# вы хотите, чтобы какой-то фрагмент алгоритма был скрыт, вы можете написать эту
# часть программы на С или С++, а затем использовать ее из программы на Python.
# Python легко расширяется с помощью кода C/C++/Java и легко встраивается в 
# приложения.
# 4.8. Встраиваемость
# Код Python можно встраивать в программы на С/С++, что позволяет использовать
# возможности скриптов.
# 4.9. Внушительные библиотеки
# Стандартная библиотека Python, которую обычно упоминают как одну из сильнейших
# сторон этого языка, содержит инструменты, подходящие для огромного множества
# задач. Для написания приложений, которым требуется выход в Интернет, есть 
# многие стандартные форматы и протоколы, такие как МIМЕ и НТТР. Здесь же
# вы найдете модули для создания графических пользовательских интерфейсов, 
# подключения к реляционным базам данных, генерации случайных чисел, работы с 
# десятичными дробями произвольной точности, работы с регулярными выражениями
# и модульного тестирования.
# ♦ графические пользовательские интерфейсы;
# ♦ веб-фреймворки;
# ♦ мультимедиа;
# ♦ базы данных;
# ♦ сети;
# ♦ фреймворки тестирования;
# ♦ автоматизация;
# ♦ парсинг веб-страниц;
# ♦ документация;
# ♦ системное администрирование;
# ♦ научные вычисления;
# ♦ обработка текста;
# ♦ обработка изображений
# 5. Дистрибутив Anaconda
# Дистрибутив Anaconda - это самый простой и наиболее часто используемый 
# способ установки Python и других необходимых пакетов. Он находится в 
# свободном доступе и прост в установке. Дистрибутив Anaconda с открытым 
# исходным кодом - это самый простой способ выполнять анализ данных с помощью
# языков Python/R и машинное обучение в Linux, Windows и MacOS, что позволяет
# специалистам по данным:
# ♦ быстро загрузить более 1 500 пакетов Python/R, предназначенных для задач 
# анализа данных;
# ♦ управлять библиотеками, зависимостями и средами с помощью Conda;
# ♦ разрабатывать и обучать модели машинного обучения и глубокого обучения
# с помощью пакетов Scikit-leam, TensorF\ow и Theano;
# ♦ выполнять эффективный и масштабируемый анализ данных с помощью Dask,
# NumPy, Pandas и Numba;
# ♦ визуализировать результаты с помощью Matplotlib, Bokeh, Datashader и Holo
# views.
# 5.1. Консоль IPython Qt
# Консоль Qt - это очень легкое приложение, во многом похожее на командную
# строку, но с дополнительными функциями, которые можно реализовать только
# в графическом интерфейсе.
# Консоль IPython позволяет выполнять команды, а также вводить, 
# взаимодействовать и визуализировать данные через любое количество полноценных
# интерпретаторов I Python. Каждая консоль выполняется в отдельном процессе,
# что позволяет запускать скрипты, прерывать выполнение и перезапускать или
# завершать сессию, не затрагивая другие консоли, и легко тестировать свой
# код в чистой среде, не прерывая основного сеанса.
# 5.2. Spyder IDE
# Spyder - это мощная научная среда, написанная на Python для Python, 
# разработанная учеными, инженерами и аналитиками данных для своих нужд. Эта
# среда отличается уникальным сочетанием функций редактирования, анализа, 
# отладки и профилирования, присущих сложным инструментам разработки, и 
# функций исследования данных, интерактивного выполнения, глубокой проверки и 
# фантастическими возможностями визуализации, присущих научному программному
# обеспечению. Кроме того, в Spyder имеется встроенная интеграция со многими
# популярными · научными пакетами, такими как NumPy, SciPy, Pandas, Matplotlib,
# SymPy и др.
# 5.3. Jupyter Notebook
# Этот редактор расширяет консольный подход к интерактивным вычислениям в 
# качественно новом направлении и сконструирован как веб-приложение, подходящее
# для разработки, документирования и выполнения кода, а также передачи
# результатов. Jupyter Notebook объединяет в себе два компонента:
# ♦ веб-приложение - инструмент на основе браузера, предназначенный для 
# интерактивного создания документов, сочетающий в себе пояснительный текст,
# математические вычисления и мультимедийный вывод результатов. Jupyter Notebook
# позволяет работать с кодом в редакторе, встроенном в окно браузера, с 
# автоматическим выделением синтаксиса цветом, отступами, заполнением
# табуляцией и анализом. Можно запустить код Python из браузера и получить при
# крепленные к коду результаты вычислений. ;
# ♦ документы Notebook, содержащие все видимое в веб-браузере, включая входные
# и выходные данные вычислений, пояснительный текст, математические данные,
# изображения и мультимедийные представления объектов. Документы Notebook
# содержат входные и выходные данные интерактивного сеанса, а также
# дополнительный текст, который добавлен к коду, но не предназначен для
# выполнения. 
# 5.3.1. Запуск сервера Notebook
# Вы можете запустить сервер Notebook из командной строки, используя следующую
# команду:
# Jupyter notebook
# В консоли появится некоторая информация о сервере, после чего в веб-браузере
# откроется URL-адрес веб-приложения (по умолчанию http://127.0.0.1:8888).
# Кроме того, вы можете открыть Jupyter Notebook из окна Anaconda Navigator.
# Главная страница веб-приложения Jupyter Notebook представляет собой дашборд,
# на котором отображаются созданные документы из вашего каталога (по умолчанию
# отображается рабочая папка, из которой был запущен сервер Notebook).
# При запуске сервера Notebook из командной строки вы также можете напрямую
# открыть конкретный документ, минуя дашборд, с помощью команды:
# Jupyter notebook my_notebook. ipynЬ
# Новый документ можно создать либо на панели управления, либо с помощью пункта
# меню File/New. Каждому открытом документу соответствует один интерактивный сеанс,
# подключенный к ядру, которое будет выполнять пользовательский код и возвращать 
# результаты.
# Документ состоит из:
# Имя документа. Название, отображаемое вверху страницы рядом с логотипом
# Jupyter, - это имя файла ipynb. При нажатии на имя документа открывается
# диалоговое окно, позволяющее переименовать его. 
# ♦ Панель меню. В меню есть различные операции, которые можно использовать
# цля работы с документом.
# ♦ Панель инструментов. На панель инструментов в виде иконок выведены самые
# распространенные операции над документом.
# ♦ Ячейка кода. Это тип ячейки по умолчанию. 
# Документ состоит из последовательности ячеек. Ячейка представляет собой много
# строчное текстовое поле ввода, содержимое которого можно выполнить либо с по
# мощью комбинации клавиш <Shift>+<Enter>, либо путем нажатия кнопки Play на
# панели инструментов, либо с помощью пункта меню Cell l Run. Поведение ячейки
# при ее выполнении зависит от типа ячейки. Всего существуют три типа ячеек:
# ячейки кода, ячейки разметки Markdown и ячейки без формата. Каждая ячейка по
# умолчанию является ячейкой кода, но ее тип можно изменить с помощью выпадающего
# списка на панели инструментов (изначально тип будет Code) или с помощью горячих
# клавиш:
# <Shift>+<Enter> - выполнить код в ячейке
# <Esc> - командный режим
# <Enter> - режим редактирования
# <Н> (в командном режиме) - получение списка всех доступных сочетаний клавиш.
# Одно из ключевых преимуществ документа Jupyter Notebook - возможность отображать
# графики, сгенерированные в результате выполнения ячеек кода. Ядро IPython 
# специально спроектировано для бесшовной работы с библиотекой построения графиков
# Matplotlib, за счет которой и реализована эта функциональность. Интеграция
# библиотеки построения графиков - это особенность ядра.
#

# """introduction to python."""
# 1. Что такое Python?
#
# Python - это бесплатный интерпретируемый высокоуровневый язык
# программирования общего назначения с открытым исходным кодом.
# Python был создан Гвидо ван Россумом и впервые выпущен в 1991 r. 
# Он поддерживает несколько парадигм программирования, включая структурное 
# (особенно процедурное) объектно-ориентированное и функциональное программирование.
# Его языковые конструкции и объектно-ориентированный подход позволяют 
# программистам писать понятный и логичный код в рамках как небольших, так и крупно
# масштабных проектов.
# Python - это простой в освоении и очень мощный язык программирования. 
# Элегантный синтаксис и динамическая типизация Python вместе с его
# интерпретируемостью делают его идеальным языком для написания сценариев и
# быстрой разработки приложений во многих областях и на множестве платформ.
#
# Самыми популярными языками программирования
# для специалистов по данным являются:
# 1. Python 
# 2. С++
# 3. R 
# 4. Java
# 5. SQL 
# 6. Matlab
# Преимущества Python:
# ♦ Это один из самых популярных языков программирования, прочно вошедший
# в индустрию разработки программного обеспечения.
# ♦ Занимает первое место среди языков-аналогов согласно рейтингам из открытых
# источников или статей по языкам программирования.
# ♦ Стабильно популярный, а еще лучше с растущей популярностью.
# ♦ У языка есть большой набор библиотек, инструменты, фреймворки и большое
# сообщество, которое вносит свой вклад в развитие языка.
# ♦ Язык хорошо востребован на рынке труда и позволяет получать хорошую зар-
# плату.
# Кроме того, Python гибок в настройке и может быть расширен
# на другие платформы. В автономном виде это довольно мощный язык для решения
# множества задач. У Python открытый исходный код, и он широко используется.
# Модули и библиотеки находятся в свободном доступе, и их число растет с каждым
# днем.
# Python также очень хорошо приспособлен для решения задач интеллектуального
# анализа данных, аналитики данных и машинного обучения. Возможности языка
# программирования в сочетании с модулями анализа данных делают его мощным
# оружием в арсенале любого аналитика.
#
# 2. Появление Python
# Язык Python был придуман в конце 1980-х rr. Гвидо ван Россумом, сотрудником
# Centrum Wiskunde & Infonnatica (CWI) в Нидерландах, как преемник языка АВС.
# Его реализация началась в декабре 1989 г. Ван Россум был ведущим разработчиком
# Python до 1 2 июля 20 1 8 г., после чего ушел в «отпуск на неопределенный срок» и
# 16 октября 2000 r. был выпущен Python 2.0, в котором появилось множество новых
# базовых функций, включая сборщик мусора с обнаружением циклических ссылок и
# поддержку Unicode.
# 3 декабря 2008 r. был выпущен Python 3 .0. Это была сильно измененная версия
# языка, не имеющая полной обратной совместимости. 
# Кстати, язык назван в честь шоу на канале ВВС «Летающий цирк Монти Пайтона»
# (Monty Python's Flying Circus) и со змеями никак не связан. Ссылки на скетчи 
# Монти Пайтона в документации не только разрешены, но и приветствуются! 
#
# 3. Python и другие языки программирования
# Python проще в использовании, доступен в операционных системах Windows, MacOS и
# UNIX и позволяет выполнить работу быстрее.
# Python прост в использовании, но при этом это настоящий язык программирования,
# в котором есть гораздо более мощный инструментарий для создания больших программ, 
# чем могут предложить shell-скрипты или Ьаt-файлы. С другой стороны, 
# в Python также реализовано больше проверок ошибок, чем в С, и, как в любом языке
# высокого уровня, в нем есть встроенные высокоуровневые типы данных, такие как 
# гибкие массивы и словари. 
# Python позволяет разделять программу на модули, которые можно повторно
# использовать в других программах на Python. В нем есть большой встроенный набор
# стандартных модулей, которые можно использовать в качестве основы для своих
# программ или в качестве примеров для начала обучения программированию на
# Python. В этих модулях реализован файловый ввод-вывод, системные вызовы, сокеты,
# а также инструменты для создания графических пользовательских интерфейсов,
# такие как Tkinter.
# Python - это интерпретируемый язык, позволяющий значительно сэкономить время.
# Интерпретатор можно использовать в интерактивном режиме, что позволяет легко
# экспериментировать с функциями языка, писать одноразовые программы или
# тестировать функции во время нисходящей разработки программы.
# А еще это удобный настольный калькулятор.
# Python позволяет писать программы компактно и читабельно. Программы, написанные 
# на Python, обычно намного короче таких же программ на С, С++ или Java
# по нескольким причинам.
# ♦ Типы данных высокого уровня позволяют записывать сложные операции в одну
# строку.
# ♦ Группировка операторов выполняется с помощью отступов, а не с помощью
# скобок в начале и конце блока.
# ♦ Объявление переменных или аргументов не требуется.
# Python является расширяемым: если вы знаете язык С, то можете добавить в 
# интерпретатор новую встроенную функцию или модуль, который бы выполнял важные
# с точки зрения производительности части кода с максимальной скоростью или
# связывал программы на Python с библиотеками, доступными в двоичной форме
# (например, графическими библиотеками конкретного производителя). После 
# подключения вы можете связать интерпретатор Python с приложением, написанным на
# С, и использовать его как расширение или командный язык для этого приложения.
#
# Основная философия языка кратко изложена в документе Zen of Python1 , в котором
# можно найти такие афоризмы, как:
# ♦ Красивое лучше, чем уродливое.
# ♦ Явное лучше, чем неявное.
# ♦ Простое лучше, чем сложное.
# ♦ Сложное лучше, чем запутанное.
# ♦ Читаемость имеет значение.
#
# 4. Преимущества Python по сравнению с другими языками
# 4.1 . Простота
# Python по простоте напоминает «дисциплинированный английский». То есть это не
# какой-то чужеродный язык, который нормальный человек не может понять. Но в то
# же время для его применения требуется некоторая дисциплина. Чтение кода на
# Python похоже на чтение на английском. Простота - одна из основных сильных
# сторон Python. Это позволяет нам больше сосредоточиться на решении, а не на
# синтаксисе языка программирования. 
# 4.2. Свободный и открытый исходный код
# Python распространяется бесплатно. Как мы увидим в процессе загрузки и 
# установки Python, все делается совершенно бесплатно. И не будет никаких скрытых 
# платежей за использование или распространение вашей работы.
# Python распространяется по модели FLOSS (Free/Libre and Open Source Software).
# Проще говоря, вы можете открыто распространять дубликаты этого продукта, читать
# его исходный код, вносить в него изменения и использовать его в бесплатных
# проектах. Есть целое сообщество FLOSS, которое взаимодействует между собой и
# обменивается информацией. Это одна из причин, почему Python нам подходит, -
# этот язык был создан и постоянно совершенствуется сообществом, которое желает
# сделать его как можно лучше.
# 4.3. Высокоуровневость
# Язык программирования высокого уровня - это язык, в котором вам не приходится
# думать о множестве деталей, которые нужны при использовании языка 
# программирования низкого уровня. Например, в Python не приходится беспокоиться
# об управлении памятью, используемой вашей программой. Проще говоря, языки
# низкого уровня ближе к аппаратному обеспечению, чем языки программирования
# высокого уровня, которые ближе к человеческим языкам.
# 4.4. Портативность
# Портативность означает, что Python можно использовать на разных типах машин,
# независимо от аппаратных средств или ограничений операционной системы. 
# Благодаря открытому исходному коду Python был перенесен на многие платформы,
# и его можно использовать в Windows, GNU/Linux, Macintosh, Solaris, Palm OS,
# PlayStation, Sharp Zaurus, Windows СЕ и PocketPC !
# 4.5. Интерпретируемость
# Когда вы пишете программу на языке С или С++, она преобразуется из исходного
# языка, т. е. из кода на С или С++, в машинный код (состоящий из О и 1 ), 
# потому что именно такой язык понимает компьютер. Этот процесс выполняется 
# с помощью компилятора. Когда программа запускается, программное обеспечение
# компоновщика копирует программу в память и запускает ее.
# Python не требует компиляции в двоичный код, а ваша программа запускается 
# прямо из исходного кода. Внутри Python преобразует исходный код в
# промежуточную форму, называемую байт-кодами, затем переводит ее на родной
# язык компьютера и запускает.
# Python - это самый быстроразвивающийся язык программирования в 2020 году,
# поэтому недостатка в интерпретаторах у него нет. 
# 4.5.1. Интерпретаторы Python 
# Что такое интерпретатор?
# По определению интерпретатор - это разновидность компьютерной программы,
# которая непосредственно выполняет инструкции, написанные на каком-либо языке
# программирования или языке сценариев. Под непосредственным выполнением
# подразумевается, что предварительная компиляция кода в программу на машинном
# языке не требуется.
# Когда вы устанавливаете Python, с ним также устанавливается интерпретатор
# по умолчанию. Вы можете запустить интерпретатор по умолчанию, набрав команду 
# python в командной строке вашего компьютера. После загрузки интерпретатора
# код на Python можно выполнять в командной строке. Этот интерпретатор 
# используется по умолчанию, но у него есть свои ограничения. Например, в 
# нем нет отступов, выделения синтаксиса цветом, дополнения табуляции и
# многого другого, что есть в других интерпретаторах.
# IPython - это альтернативный интерпретатор Python. Это интерактивная оболочка,
# которая используется для вычислений на Python. В ней гораздо больше полезных
# функций по сравнению с интерпретатором Python, используемым по умолчанию.
# В комплекте с IPython идет редактор Jupyter Notebook - один из наиболее часто
# используемых начинающими программистами инструментов.
# CPython
# Это стандартная и наиболее широко используемая реализация языка программирования
# Python. Написанный на С и Python, интерпретатор CPython содержит много внешних
# функций С и связан с другими языками программирования.
# CPython можно в какой-то степени считать компилятором, поскольку перед 
# интерпретацией он преобразует код Python в байт-код. В нем используется GIL
# (глобальная блокировка интерпретатора), которая ограничивает возможности
# интерпретатора, поскольку она отключает параллельные потоки Python в 
# рамках одного процесса. 
# CPython - единственный вариант использования пакетов Python, которому для
# правильной работы нужны расширения С. 
# lronPython
# IronPython - это реализация языка программирования Python для платформы .NET,
# в которой используются библиотеки Python и .NET. Этот интерпретатор может
# предоставлять код Python другим языкам, относящимся к платформе .NET.
# (Поддержка - до Python 2. 7)
# В IronPython есть поддержка динамической компиляции и встроенная интерактив
# ная консоль. Использование интерпретатора Python позволяет скриптам Python
# взаимодействовать с объектами .NET. IronPython напрямую интегрируется в среду
# разработки Visual Studio.
# Jython
# Ранее известная как JPython, реализация Jython работает на платформе Java.
# Это сочетание Java и Python преобразует код Python в байт-код Java и, 
# следовательно, позволяет запускать код Python на любой машине, на которой
# установлена JVМ.
# Jython обеспечивает поддержку как статической, так и динамической компиляции.
# Важной особенностью этого интерпретатора Python является то, что он позволяет
# импортировать, а также использовать любые классы Java так, словно это модуль 
# Python.
# РуРу
# РуРу - это быстрая и совместимая альтернативная реализация языка программирования
# Python. Этот интерпретатор Python реализован в RPython, который представляет
# собой ограниченное статически типизированное подмножество языка программирования
# Python. Благодаря ЛТ-компилятору РуРу поддерживает серверные части С, CLI и JVM.
# Основная цель РуРу - обеспечить максимальную совместимость с эталонной 
# реализацией CPython и в то же время увеличить производительность.
# РуРу используется разработчиками Python, которые хотят увеличить 
# производительность некоторых видов кода Python. 
# PythonNet
# PythonNet позволяет выполнить почти бесшовную интеграцию Python с .NET CLR.
# Подход этого интерпретатора можно считать противоположным тому, которому 
# следует lronPython. При использовании вместе с Mono, PythonNet позволяет 
# встроенным в операционные системы установкам Python (кроме Windows) работать 
# в среде .NET. PythonNet можно использовать совместно с IronPython без
# каких-либо проблем.
# Stackless Python
# CPython и другие популярные интерпретаторы Python для управления стеком используют 
# язык С. Но к интерпретатору Stackless Python это не относится. Хотя в Stackless
# Python используется стек С, между вызовами функций он очищается. Следовательно,
# интерпретатор Python в работе со стеком не зависит от вызова С. Как и CPython,
# Stackless Python написан с использованием С и Python. Помимо поддержки потоков,
# у Stackless Python есть поддержка каналов связи, сопрограмм, предварительно 
# скомпилированных двоичных файлов, циклического планирования, сериализации задач
# и тасклетов.
# Возможно, самая важная особенность Stackless Python - это наличие микропотоков.
# Эта возможность помогает избежать значительной части накладных: расходов,
# связанных с обычными потоками операционной системы.
# 4.6. Объектная ориентированность
# Python поддерживает процедурно-ориентированное программирование, а также
# объектно-ориентированное программирование. В процедурно-ориентированных:
# языках программа состоит из процедур или функций, в которых заключены 
# многократно используемые части программы. В объектно-ориентированных языках 
# программа построена на объектах, которые включают в себе данные и 
# функциональность. 
# 4.7. Расширяемость 
# Если в коде есть критический фрагмент, от которого зависит быстродействие, или
# вы хотите, чтобы какой-то фрагмент алгоритма был скрыт, вы можете написать эту
# часть программы на С или С++, а затем использовать ее из программы на Python.
# Python легко расширяется с помощью кода C/C++/Java и легко встраивается в 
# приложения.
# 4.8. Встраиваемость
# Код Python можно встраивать в программы на С/С++, что позволяет использовать
# возможности скриптов.
# 4.9. Внушительные библиотеки
# Стандартная библиотека Python, которую обычно упоминают как одну из сильнейших
# сторон этого языка, содержит инструменты, подходящие для огромного множества
# задач. Для написания приложений, которым требуется выход в Интернет, есть 
# многие стандартные форматы и протоколы, такие как МIМЕ и НТТР. Здесь же
# вы найдете модули для создания графических пользовательских интерфейсов, 
# подключения к реляционным базам данных, генерации случайных чисел, работы с 
# десятичными дробями произвольной точности, работы с регулярными выражениями
# и модульного тестирования.
# ♦ графические пользовательские интерфейсы;
# ♦ веб-фреймворки;
# ♦ мультимедиа;
# ♦ базы данных;
# ♦ сети;
# ♦ фреймворки тестирования;
# ♦ автоматизация;
# ♦ парсинг веб-страниц;
# ♦ документация;
# ♦ системное администрирование;
# ♦ научные вычисления;
# ♦ обработка текста;
# ♦ обработка изображений
# 5. Дистрибутив Anaconda
# Дистрибутив Anaconda - это самый простой и наиболее часто используемый 
# способ установки Python и других необходимых пакетов. Он находится в 
# свободном доступе и прост в установке. Дистрибутив Anaconda с открытым 
# исходным кодом - это самый простой способ выполнять анализ данных с помощью
# языков Python/R и машинное обучение в Linux, Windows и MacOS, что позволяет
# специалистам по данным:
# ♦ быстро загрузить более 1 500 пакетов Python/R, предназначенных для задач 
# анализа данных;
# ♦ управлять библиотеками, зависимостями и средами с помощью Conda;
# ♦ разрабатывать и обучать модели машинного обучения и глубокого обучения
# с помощью пакетов Scikit-leam, TensorF\ow и Theano;
# ♦ выполнять эффективный и масштабируемый анализ данных с помощью Dask,
# NumPy, Pandas и Numba;
# ♦ визуализировать результаты с помощью Matplotlib, Bokeh, Datashader и Holo
# views.
# 5.1. Консоль IPython Qt
# Консоль Qt - это очень легкое приложение, во многом похожее на командную
# строку, но с дополнительными функциями, которые можно реализовать только
# в графическом интерфейсе.
# Консоль IPython позволяет выполнять команды, а также вводить, 
# взаимодействовать и визуализировать данные через любое количество полноценных
# интерпретаторов I Python. Каждая консоль выполняется в отдельном процессе,
# что позволяет запускать скрипты, прерывать выполнение и перезапускать или
# завершать сессию, не затрагивая другие консоли, и легко тестировать свой
# код в чистой среде, не прерывая основного сеанса.
# 5.2. Spyder IDE
# Spyder - это мощная научная среда, написанная на Python для Python, 
# разработанная учеными, инженерами и аналитиками данных для своих нужд. Эта
# среда отличается уникальным сочетанием функций редактирования, анализа, 
# отладки и профилирования, присущих сложным инструментам разработки, и 
# функций исследования данных, интерактивного выполнения, глубокой проверки и 
# фантастическими возможностями визуализации, присущих научному программному
# обеспечению. Кроме того, в Spyder имеется встроенная интеграция со многими
# популярными · научными пакетами, такими как NumPy, SciPy, Pandas, Matplotlib,
# SymPy и др.
# 5.3. Jupyter Notebook
# Этот редактор расширяет консольный подход к интерактивным вычислениям в 
# качественно новом направлении и сконструирован как веб-приложение, подходящее
# для разработки, документирования и выполнения кода, а также передачи
# результатов. Jupyter Notebook объединяет в себе два компонента:
# ♦ веб-приложение - инструмент на основе браузера, предназначенный для 
# интерактивного создания документов, сочетающий в себе пояснительный текст,
# математические вычисления и мультимедийный вывод результатов. Jupyter Notebook
# позволяет работать с кодом в редакторе, встроенном в окно браузера, с 
# автоматическим выделением синтаксиса цветом, отступами, заполнением
# табуляцией и анализом. Можно запустить код Python из браузера и получить при
# крепленные к коду результаты вычислений. ;
# ♦ документы Notebook, содержащие все видимое в веб-браузере, включая входные
# и выходные данные вычислений, пояснительный текст, математические данные,
# изображения и мультимедийные представления объектов. Документы Notebook
# содержат входные и выходные данные интерактивного сеанса, а также
# дополнительный текст, который добавлен к коду, но не предназначен для
# выполнения. 
# 5.3.1. Запуск сервера Notebook
# Вы можете запустить сервер Notebook из командной строки, используя следующую
# команду:
# Jupyter notebook
# В консоли появится некоторая информация о сервере, после чего в веб-браузере
# откроется URL-адрес веб-приложения (по умолчанию http://127.0.0.1:8888).
# Кроме того, вы можете открыть Jupyter Notebook из окна Anaconda Navigator.
# Главная страница веб-приложения Jupyter Notebook представляет собой дашборд,
# на котором отображаются созданные документы из вашего каталога (по умолчанию
# отображается рабочая папка, из которой был запущен сервер Notebook).
# При запуске сервера Notebook из командной строки вы также можете напрямую
# открыть конкретный документ, минуя дашборд, с помощью команды:
# Jupyter notebook my_notebook. ipynЬ
# Новый документ можно создать либо на панели управления, либо с помощью пункта
# меню File/New. Каждому открытом документу соответствует один интерактивный сеанс,
# подключенный к ядру, которое будет выполнять пользовательский код и возвращать 
# результаты.
# Документ состоит из:
# Имя документа. Название, отображаемое вверху страницы рядом с логотипом
# Jupyter, - это имя файла ipynb. При нажатии на имя документа открывается
# диалоговое окно, позволяющее переименовать его. 
# ♦ Панель меню. В меню есть различные операции, которые можно использовать
# цля работы с документом.
# ♦ Панель инструментов. На панель инструментов в виде иконок выведены самые
# распространенные операции над документом.
# ♦ Ячейка кода. Это тип ячейки по умолчанию. 
# Документ состоит из последовательности ячеек. Ячейка представляет собой много
# строчное текстовое поле ввода, содержимое которого можно выполнить либо с по
# мощью комбинации клавиш <Shift>+<Enter>, либо путем нажатия кнопки Play на
# панели инструментов, либо с помощью пункта меню Cell l Run. Поведение ячейки
# при ее выполнении зависит от типа ячейки. Всего существуют три типа ячеек:
# ячейки кода, ячейки разметки Markdown и ячейки без формата. Каждая ячейка по
# умолчанию является ячейкой кода, но ее тип можно изменить с помощью выпадающего
# списка на панели инструментов (изначально тип будет Code) или с помощью горячих
# клавиш:
# <Shift>+<Enter> - выполнить код в ячейке
# <Esc> - командный режим
# <Enter> - режим редактирования
# <Н> (в командном режиме) - получение списка всех доступных сочетаний клавиш.
# Одно из ключевых преимуществ документа Jupyter Notebook - возможность отображать
# графики, сгенерированные в результате выполнения ячеек кода. Ядро IPython 
# специально спроектировано для бесшовной работы с библиотекой построения графиков
# Matplotlib, за счет которой и реализована эта функциональность. Интеграция
# библиотеки построения графиков - это особенность ядра.
#
# Ответьте на вопросы: 
# 1.  Python - это программное обеспечение с открытым исходным кодом. Это то
# же самое, что и бесплатное ПО?
# Ответ:
# Да, Python - это бесплатное ПО.
# 2. У всех ли бесплатных программ открытый исходный код? А если нет, то в чем
# разница?
# Ответ:
# Далеко не у всех бесплатных программ открытый исходный код. Существуют программы
# с закрытым кодом, как правило, это означает, что распространяются только бинарные
# (откомпилированные) версии программы, и лицензия подразумевает отсутствие
# доступа к исходному коду программы.
# 3 . Python поддерживает динамическую типизацию. Что это такое?
# Ответ:
# Динамическая типизация означает возможность после объявления переменной, поменять
# не только ее значение, но и тип данных. 
# 4. Назовите 5 самых популярных языков программирования для специалистов по
# анализу данных?
# Ответ:
# 1. Python 
# 2. С++
# 3. R 
# 4. Java
# 5. SQL 
# 5 . В чем заключается преимущество Python по сравнению с языком С?
# Ответ:
# Python проще в использовании, доступен в операционных системах Windows, MacOS и
# UNIX и позволяет выполнить работу быстрее. В Python также реализовано больше
# проверок ошибок, чем в С, и, как в любом языке высокого уровня, в нем есть
# встроенные высокоуровневые типы данных, такие как гибкие массивы и словари.
# 6. Python портативен. Что в этом контексте означает «портативность»?
# Ответ:
# Портативность означает, что Python можно использовать на разных типах машин,
# независимо от аппаратных средств или ограничений операционной системы.
# 7. В чем разница между «расширяемым» и «встраиваемым» языком?
# Ответ:
# Расширяемость означает возможность написать часть программы на другом языке 
# и запустить его из программы на Python, а встраиваемость - код Python можно встраивать
# в программы на других языках.
# 8. В чем смысл IDE? Чем она отличается от командной строки?
# Ответ:
# Не смотря на то, что командная строка - это самый эффективный способ запуска на 
# компьютере любого программного обеспечения, IDE значительно удобнее. В ней имеются
# функции редактирования, интерактивного тестирования, отладки и самоанализа.
# 9. Как открыть существующий документ Jupyter Notebook? Чем эта процедура отличается
# от открытия РDF-файла или текстового файла?
# Ответ:
# Каждому открытом документу соответствует один интерактивный сеанс, подключенный к ядру,
# которое будет выполнять пользовательский код и возвращать результаты. Это ядро остается 
# активным при закрытии окна браузера, и повторное открытие того же документа с панели
# управления приведет к повторному подключению веб-приложения к тому же ядру. 
# 10. В чем разница между «ячейками разметки Markdown» и «ячейками кода»
# в Jupyter Notebook? Для чего они нужны?
# Ответ:
# Ячейка кода позволяет редактировать и писать новый код с выделением синтаксиса цветом и 
# заполнением табуляцией. Используемый вами язык программирования зависит от ядра, а ядро
# по умолчанию (IPython) запускает код Python. Язык Markdown - это простой способ выполнить
# разметку текста и указать, какой текст нужно выделить курсивом, какой жирным шрифтом,
# где вставить список и т. д. При выполнении ячейки Markdown разметка Markdown преобразуется
# в соответствующий форматированный текст. Markdown также допускает форматирование
# с помощью НТМL-кода.
#
# 1.5.2. Правда или ложь.
# 1. Ложь
# 2. Правда
# 3. Ложь
# 4. Ложь
# 5. Ложь
# 6. Правда
# 7. Ложь
# 8. Правда
# 9. Правда
# 10. Ложь
