# ---
# jupyter:
#   jupytext:
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.5'
#       jupytext_version: 1.16.4
#   kernelspec:
#     display_name: Python 3
#     language: python
#     name: python3
# ---

"""Основы Python."""

# Основы Python
#
# 3.1. Запуск Python
# 3.1.1. Использование Spyder IDE
# Интегрированная среда разработки Spyder имеет свой графический интерфейс. 
# Сначала откройте Anaconda Navigator.
# Нажмите кнопку Launch под приложением Spyder. Откроется первое окно Spyder
# IDE со временным файлом.
# Для начала изучения нам понадобятся три основных компонента Spyder IDE:
# ♦ Редактор. 
# Редактор Spyder во многих отношениях лучше простого текстового редактора.
# Помните, что это IDE, и, следовательно, ее функционал гораздо шире
# и включает в себя, например, нумерацию строк, выделение синтаксиса (ключе-
# вые слова в синтаксисе подсвечиваются цветом), функции автозаполнения и
# многое другое. В этом многоязычном редакторе вы можете эффективно работать
# с функциями и классами, пользоваться инструментами анализа кода, автомати-
# ческим завершением кода, горизонтальным/вертикальным разделением и пере-
# ходом к определению объекта.
# ♦ Консоль IPython. 
# Вам доступны возможности любого количества консолей I Python в сочетании
# с гибкостью графического интерфейса. Вы можете запускать код по строкам, 
# ячейкам или файлам, а также отображать графики прямо в строке.
# ♦ Обозреватель переменных. 
# Этот компонент позволяет взаимодействовать с переменными и изменять их 
# на лету, строить гистограмму или временной ряд, редактировать датафреймы
# или массивы NumPy, сортировать коллекции, копаться во вложенных объектах
# и многое другое.
# Если говорить просто, то в редакторе мы что-то пишем (в том числе код). 
# Консоль IPython - это окно консоли, подобное командной строке, в котором 
# выводятся результаты выполнения кода и которое можно использовать независимо
# от редактора. В окне обозревателя переменных отображаются создаваемые 
# объекты: новые переменные, классы, фреймы данных, диаграммы, графики и т. д.
# 3.1.2. Использование Jupyter Notebook
# Jupyter Notebook также входит в состав Anaconda, поэтому снова откройте окно
# Anaconda Navigator. Нажмите кнопку Launch под приложением Jupyter Notebook.
# Стартовое окно Jupyter Notebook откроется в браузере, который установлен по
# умолчанию. Чтобы создать документ Notebook, нажмите на кнопку New в правом
# верхнем углу и выберите пункт меню Python 3.  Откроется новая веб-страница 
# с одной пустой ячейкой и без имени. Теперь вы можете добавлять в документ
# любое количество ячеек, удалять их, изменять порядок отображения и многое
# другое. Чтобы запустить строку кода, просто введите ее в ячейку, оставьте
# тип ячейки Code (который задан по умолчанию) и используйте любой из способов
# запуска:
# ♦ с помощью мыши - откройте пункт меню Cell. Используйте любой из вариан-
# тов запуска, какой вам подходит;
# ♦ с помощью клавиаrуры - к пунктам меню Cell можно обращаться с помощью
# горячих клавиш. Вот три наиболее часто используемых сочетания клавиш для
# запуска кода:
# • <Shift>+<Enter> - запустить ячейку и перейти к следующей;
# • <Ctrl>+<Enter> - запустить выбранные ячейки;
# • <Alt>+<Enter> - запустить ячейку и вставить новую ниже.
#
# 3.2. Начнем с «Hello World!»
# Давайте продолжим традицию изучать компьютерное программирование прове
# ренным поколениями методом - с помощью «Hello World!».
#

print("Hello World!")

# 3.3. Использование Python как калькулятора.
# Интерпретатор Python можно использовать как простой калькулятор: мы вводим
# в него выражение, а он возвращает значение. Синтаксис выражений прост: арифме-
# тические операторы +, -, * и / работают так же, как в любой компьютерной про-
# грамме, которую вы могли использовать, например, в цифровом калькуляторе или
# электронной таблице Excel; круглые скобки ( ) , как обычно, могут использоваться
# для группировки. 

2 + 2

50 - 5 * 6

(50 - 5 * 6) / 4

8 / 5  # результат деления всегда с плавающей точкой

# Целые числа (например, 2, 4, 20) имеют тип int, а числа с дробной частью 
# (например, 5.0, 1.6) имеют тип float. Оператор деления / всегда возвращает
# float. Чтобы выполнить деление нацело и получить целочисленный результат
# (отбрасив дробную часть), вы можете использовать оператор //, а для 
# вычисления остатка - оператор %.

17 / 3  # обычное деление с плавающей точкой

17 // 3  # целочисленное деление

17 % 3  # остаток от деления

5 * 3 + 2  # проверка : результат * делитель + остаток

# Для вычисления степени можно использовать оператор ** .

5**2  # 5 в квадрате

2**7  # 2 в степени 7

# Знак равенства = используется для присвоения значения переменной. После при
# своения результат не отображается:

# +
width = 20
height = 5 * 9
# обратите внимание, что этот код ничего не возвращает

print(width * height)
# -

# 3.3.2. Строки
# Помимо чисел Python может также работать со строками, которые можно задавать
# несколькими способами. Они могут быть заключены в одинарные ' . . . ' или 
# двойные кавычки " . . . ". Для экранирования кавычек используется символ \ :

print("python string")

print("doesn't")

print("doesп ' t")

# В интерактивном интерпретаторе строка вывода заключается в кавычки, а специ-
# альные символы экранированы обратной косой чертой. Функция print ( ) позволяет
# получить более читаемый вывод, опустить кавычки и вывести экранированные и
# специальные символы:

print('"Isn\' t," they said.')

print('"Isn\'t," they said.')

# Если вы не хотите, чтобы управляющие символы (такие как \n, \t) 
# интерпретировались как специальные, вы можете использовать необработанные
# строки, добавив букву r перед первой кавычкой:

print("C:\\some\name")  # здесь \n - переход на новую строку!

print(r"C:\some" + r"\name")
# r перед открывающей кавычкой

# 3.3.2.1. Конкатенация и повторение
# Строки можно объединять (склеивать) с помощью оператора + и повторять с 
# помощью оператора *. Запомнить это просто. Оператор + складывает, а 
# * умножает.

"a" + "b"

"t" * 5

"no" * 3 + "dip"

# Два или более строковых литерала (заключенных в кавычки строки), 
# расположенных рядом друг с другом, автоматически объединяются.

print("nil" + "abh")

# Это особенно удобно, если требуется разделить длинные строки.

text_1 = "Put several strings within parentheses -"
text_2 = "to have them joined together."
text = text_1 + text_2
text

# 3.3.2.2. Индексирование
# Строки можно индексировать (обращаться к элементам строки по индексу), при
# этом первый символ имеет индекс О. Отдельного типа для данных символов не
# существует, т.к. символ - это просто строка длиной в один символ.

word = "Python"
word[0]  # символ в позиции О

word[5]  # символ в позиции 5

word[-4]

# 3.3.2.3. Срезы
# Помимо индексирования строк также поддерживаются срезы. Если индексирование
# используется для извлечения отдельных символов, то срез возвращает подстроку.

word[0:2]  # с позиции О (включительно) до 2 (не включая его)

word[2:]  # с позиции 2 (включительно) до 5 (не включая его)

# Обратите внимание, что начальный индекс всегда включается, а конечный всегда
# исключается. Это гарантирует, что s [:i] + s [i:] всегда равно s.

word[:2] + word[2:]

# У срезов есть полезные значения по умолчанию для индексов. Опущенный первый
# индекс по умолчанию равен нулю, опущенный второй индекс по умолчанию равен
# длине строки.
# Строки Python нельзя изменить - они неизменяемы. Следовательно, присвоить
# новое значение символу по определенному индексу нельзя. Если вы попытаетесь
# это сделать, получите ошибку:

# word[2] = 'l'

# 3.4. Синтаксис кода Python
# 3.4.1. Выражения
# Строки, написанные в исходном коде для выполнения, называются выражениями,
# которые могут состоять из операторов разных типов, таких как оператор
# присваивания, условный оператор, оператор цикла и т. д. Все они нужны для того,
# чтобы пользователь мог получить нужный результат. Например, n = 20 - это вы
# ражение с оператором присваивания.Выражения могут быть однострочными или 
# многострочными. Многострочные выражения можно переносить на другие строки с 
# помощью круглых скобок ( ), фигурных скобок { }, квадратных скобок [],
# обратной косой черты (\)

# перенос выражения на новую строку с использованием \
s_ = 1 + 2 + 3 + 4 + +5 + 6 + 7 + 8 + 9
s_

# перенос выражения на новую строку с использованием ( )
n_ = 1 * 2 * 3 + 7 + 8 + 9
n_

# перенос выражения на новую строку с использованием [ ]
footballer = ["МESSI", "NEYMAR", "SUAREZ"]
footballer

# перенос выражения на новую строку с использованием { }
x_ = {1 + 2 + 3 + 4 + +5 + 6 + 7 + 8 + 9}
x_

# 3.4.1.1 . Окончание выражений
# В Python конец строки означает конец выражения. 
# Можно также завершить выражение с помощью точки с запятой (;). Иногда за счет
# этого можно размещать нескольких выражений в одной строке, например:
# flag = 2 ; ropes = 3; pole = 4
# 3.4.2. Переменные и присваивание значений
# Одна из самых мощных функциональностей любого языка программирования -
# это возможность работать с переменными. Переменная - это некоторое имя, свя-
# занное со значением. Обратите внимание, что переменная лишь ссылается на зна-
# чение, которое ей присвоено, но не тождественна ему. Когда переменной присваи-
# вается другое значение, старое присвоение сразу становится недействительным.
# Оператор присваивания позволяет автоматически создавать новые переменные
# и присваивать им значения:
#

# переменной а присваиваем значение 45
a_ = 45
# и выводим значение переменной на экран
print(a_)

# присваиваем той же переменной другое значение
a_ = 3 + 2
5
# и снова выводим
print(a_)

# 3.4.3. Имена переменных и ключевые слова
# Для переменных следует выбирать имена со смыслом, которые что-то говорят
# о хранимых данных. Например, при работе с данными о продажах магазина в вы
# ходные подойдет имя переменной Sales_weekend. Это не строгое правило, но его
# соблюдение очень важно для обеспечения читабельности кода. 
# Имена переменных могут быть любой длины и содержать как буквы, так и числа.
# Писать имена можно в верхнем или нижнем регистре, но одно и то же имя с раз-
# ными регистрами - это будут разные переменные, т.к. Python чувствителен к ре-
# гистру. Существует еще несколько правил именования переменных.
# ♦ Имя должно начинаться с буквы (не с цифры).
# ♦ В имени может присутствовать символ подчеркивания (_). Он используется для
# соединения слов в длинном имени переменной, т.к. пробелы использовать
# нельзя.
# ♦ Нельзя использовать в качестве имен переменных ключевые слова Python:
# and def ехес if not return
# assert del finally import or try
# break elif for in pass while
# class else from is print yield
# continue except global lamЬda raise
# Назначив переменной недопустимое имя, вы получите синтаксическую ошибку.
#
# 3.4.4. Выполнение выражений
# Выражение - это совокупность значений, переменных и операторов. Когда в ы
# вводите в командной строке выражение, интерпретатор вычисляет его и выводит
# результат.

2 + 3

# Выражения могут содержать значения, переменные и операторы, но не обязательно
# все их сразу. Само по себе значение тоже считается выражением, как и отдельно
# взятая переменная.

15

a_

# Когда интерпретатор Python выводит значение выражения, он использует тот же
# формат, который вы использовали бы для ввода значения. Для строк это означает,
# что будут выведены кавычки. Но если вы используете функцию print ( ) , Python
# отображает содержимое строки без кавычек.

# 3.5. Первые шаги в программировании

# ряд Фибоначчи
# сумма двух элементов -- это следующий элемент ряда
a_ = 0
b_ = 1
while a_ < 10:
    print(a_)
    a_, b_ = b_, a_ + b_

a_, b_ = 0, 1
while a_ < 15:
    print(a_)
    a_, b_ = b_, a_ + b_

# 1. В первой строке используется множественное присваивание: переменные а и ь
# одновременно получают значения о и 1. В последней строке кода это использу-
# ется снова, причем здесь важно, что перед таким присваиванием всегда сначала
# вычисляется правая часть. Выражения в правой части вычисляются слева на
# право.
# 2. Цикл while выполняется до тех пор, пока условие остается истинным (в первом
# варианте это было а < 1 0, которое мы позже изменили на а < 15). В Python ис-
# тинным является любое ненулевое целочисленное значение, ноль считается
# ложным. Условие также может быть строкой или списком и вообще любой по-
# следовательностью. При этом все, что имеет ненулевую длину, считается истин-
# ным, а пустые последовательности - ложными. Условие, использованное в нашем
# примере, представляет собой простое сравнение. 
# 3. Тело цикла записано с отступом. Отступы - это способ группировки выраже-
# ний в Python. В интерактивном режиме интерпретатора для задания отступа
# нужно использовать табуляцию или пробелы. На практике код бывает гораздо
# более сложным, и у всех специализированных текстовых редакторов есть функ-
# ция автоматического отступа. Когда составное выражение вводится в интерак-
# тивном режиме, за ним должна следовать пустая строка, указывающая на завер-
# шение (поскольку синтаксический анализатор не может угадать, когда блок кода
# закончился). Обратите внимание, что у всех строк в блоке должен быть одина-
# ковый отступ.
# 4. Функция print ( ) выводит значение переданного аргумента на экран. Ее работа
# отличается от простого написания выражения в строке (как мы делали ранее),
# т.к. эта функция по-другому обрабатывает несколько аргументов, числа с пла-
# вающей запятой и строки. Строки выводятся без кавычек, а между аргументами
# вставляется пробел, что позволяет красиво форматировать результаты:

i_ = 256 * 256
print("The value of i is ", i_)

# 3.5.1. Подробнее о функции print()
# Фактический синтаксис функции print ( ) выглядит так:
# print ( *obj ects, sep= ' ' , end= ' \n ' , file=sys . stdout, flush=False)
# Две важные концепции программирования на Python:
# ♦ Аргументы (иногда обозначаемые словом args);
# ♦ Именованные аргументы (иногда обозначаемые словом kwargs).
#
# Аргументы - это все, что мы передаем в функцию. Например, в функцию print( )
# мы передавали строку или переменную - это и есть аргументы. Если при опреде-
# лении функции вы хотите передавать ей больше одной переменной, но еще не знае-
# те точно, сколько аргументов у вас будет, можно указать специальный синтаксис
# *args. Символ * здесь означает, что мы можем передать функции любое количество
# переменных, а слово args - это своего рода стандартное соглашение, которое ис-
# пользуется для лучшей читаемости кода. 
# Именованные аргументы - это аргументы, для которых при передаче в функцию
# указывается не только значение, но и имя (sep=, end=, file= и flush=) Это именованные
# аргументы, у них есть имя, а справа от символа = указано присвоенное им значение.
# Параметры функции print( ) :
# ♦ *objects - любое количество любых объектов. Перед выводом все объекты со
# бираются в строку;
# ♦ sep= ' ' (необязательный) - задает разделитель объектов, если их несколько.
# Значение по умолчанию - символ пробела, указанный как ' ' ;
# ♦ end= ' \n ' (необязательный) - определяет, что вывести в конце строки. Значение
# по умолчанию - символ переноса строки ' \n ' ;
# ♦ file=sys . stdout (необязательный) - объект с методом write(string). Если этот
# параметр не указан, будет использоваться sys.stdout по умолчанию, что означает
# вывод результатов на экран;
# ♦ flush=False (необязательный) - логическое значение, указывающее, будет ли
# вывод очищен (тrue) или буферизован (False). По умолчанию имеет значение
# False.
#

# тот же ряд Фибоначчи
a_, b_ = 0, 1
while a_ < 15:
    print(a_, end=", ")
    a_, b_ = b_, a_ + b_

# 3.5.2. Форматированный вывод

a_ = 5
b_ = 6
a_b_ = 5 * 6
print(f"when {a_} is multiplied Ьу {b_}, the result is {a_b_} .")

# вариант со строками
name = "Nilabh"
lastname = "Nishchhal"
place = "Mumbai"
print(f"{name} {lastname} lives in {place}")

# В двух приведенных примерах если вы измените значения переменных, то 
# выходные данные тоже изменятся вместе с ними.

# 3.5.3. Простейшая геометрия и print().
# Нарисуем треугольник, используя только базовый код.

# print ("     /|")
# print ("    / |")
# print ("   /  |")
# print ("  /   |")
# print (" /    |")
# print ("/_____|")

# 3.6. Поиск ошибок.
# Сообщения об ошибке в Python пишутся довольно подробно
# и позволяют точно понять, в чем заключается и где находится ошибка.
# Рассмотрим три основных типа ошибок, которые возникают чаще всего.
# ♦ Синтаксическая ошибка - проблемы с языковыми конструкциями.
# Ошибка возникает, когда вы пишете код, не соблюдая синтаксис Python. 
# В тексте ошибки указан тип ошибки и место, где найден неверный син-
# таксис.
# ♦ Ошибка времени выполнения - проблемы с выполнением кода.
# Ошибка времени выполнения возникает, когда Python понимает саму команду, но
# при ее выполнении сталкивается с проблемами. Поэтому эта ошибка и называется
# «времени выполнения», поскольку возникает только после запуска программы.
# Может возникнуть из-за:
# - неверно введенное имя переменной или функции;
# - использование переменной до ее определения;
# - имя должно было быть заключено в кавычки;
# - деление на ноль и т.д.
# ♦ Семантическая ошибка - неожиданный результат.
# Эти ошибки часто бывают вызваны случайным использованием неверных пере
# менных либо просто неправильными вычислениями. Семантические ошибки -
# самые сложные в устранении.
# Дополнительные способы найти ошибку:
# 1. Поиск в Интернете. Лучшее место для поиска ответов - это сайт
# stackoverflow.com
# 2. Избегать таких случаев. Всегда стоит сначала писать несколько строк кода, а
# затем выполнять программу. Затем добавлять еще несколько строк кода и снова
# запускать. 
# 3. Промежуточные версии. Следует сохранять промежуточный прогресс в разра-
# ботке программы каждый раз, когда вы начинаете писать новую часть. Если вы
# достигли определенного этапа, сделайте резервную копию. Для этого достаточ
# но выбрать пункт меню Save as и назвать свой файл filename2.py, затем
# filename3.py и т. д. Если вы работаете с filename7.py и столкнулись с нерешае-
# мой проблемой, можно просто вернуться к filename6.py. 
# 4. Комментарии. Вы можете попытаться закомментировать проблемный участок
# кода, чтобы посмотреть, сохранится ли проблема. 
# 5. Все сначала. Когда ничего не помогает, вы можете начать писать заново, с 
# нового пустого файла. Затем скопируйте и вставьте небольшие фрагменты кода из
# старого файла по одному. Каждый раз, добавляя новый раздел, запускайте свою
# программу и проверяйте, не появилась ли проблема.
#
# 3.7. Резюме
# 1. Знакомство со Spyder IDE и Jupyter Notebook. 
# 2. Начала работу с Python и научилась использовать его в качестве калькулятора. 
# 3. Работа со строками.
# 4. Узнала, что такое выражения, операторы и переменные.
# 5. Написала многострочную программу и изучила несколько принципов написания
# кода на Python, таких как множественное присваивание, отступы, цикл и 
# вывод результата. 
# 6. Изучила, как работает функция print(), и познакомилась с двумя понятиями, такими как
# аргументы и именованные аргументы. 
# 7. Рассмотрела некоторые ошибки и что нужно делать при их вонзникновении.
#
#

# 1. В чем преимущества редактора Spyder IDE по сравнению с простым текстовым
# редактором?
# Ответ:
# Функционал IDE гораздо шире и включает в себя, например, нумерацию строк,
# выделение синтаксиса (ключевые слова в синтаксисе подсвечиваются цветом),
# функции автозаполнения и многое другое. В этом многоязычном редакторе есть
# возможность эффективно работать с функциями и классами, пользоваться
# инструментами анализа кода, автоматическим завершением кода, 
# горизонтальным/вертикальным разделением и переходом к определению объекта.
# 2. Как в Python пишутся операторы сложения, вычитания, умножения и деления?
# Ответ:
# + , -, *, /.
# 3. В чем разница между операторами * и **? Что они означают в Python?
# Ответ:
# Оператор * - умножение; оператор ** - возведение в степень.
# 4. Что такое выражения в Python? Зачем они нужны?
# Ответ:
# Выражение - это совокупность значений, переменных и операторов. Нужны они 
# в случае, когда необходимо произвести какие-либо операции и определить 
# результат.
# 5 . Что такое переменная? Как присвоить переменной какое-либо значение?
# Ответ:
# Переменная - это некоторое имя, связанное со значением. Присвоить переменной
# какое-либо значение можно через оператор присваивания, при этом переменная
# будет лишь ссылатся на значение, которое ей присвоено.
# 6. Можно ли в Python дать переменной имя import? Обоснуйте ответ.
# Ответ:
# Нельзя, это значение зарезервировано.
# 7. В Python имена math, мath эквивалентны МАТН. Так ли это на самом деле? 
# Обоснуйте свой ответ.
# Ответ:
# Неэквивалентны. В python важен регистр написания. 
# 8. Каким образом можно группировать выражения в Python?
# Ответ:
# ()
# 9. В чем разница между синтаксической ошибкой и семантической ошибкой?
# Ответ:
# Семантические или логические ошибки - это проблемы с самим построением
# вашей программы. А Синтаксическая ошибка возникает, когда вы пишете код,
# не соблюдая синтаксис Python.
# 1 0. Каково значение по умолчанию именованных аргументов sep и end в синтаксисе
# функции print()?
# Ответ:
# разделение и окончание
#

# 3.8.2. Правда или ложь
# 1. Простое деление четного числа на 2 вернет объект типа int ( целое число).
# ЛОЖЬ
# 2. Положительный индекс строки начинается с О, а отрицательный индекс начина-
# ется с - 1.
# ПРАВДА
# 3. Строки Python можно изменять, или, другими словами, они изменяемы.
# ЛОЖЬ
# 4. Dream теаm - это допустимое имя переменной в Python.
# ЛОЖЬ
# 5. В Python можно дать переменной имя lambda.
# ЛОЖЬ
# 6. Выражения в Python завершаются точкой ( . ).
# ЛОЖЬ
# 7. Выражения а = 25 и а == 25 в Python эквивалентны.
# ЛОЖЬ
# 8. Вывод выражения с использованием функции print ( ) - это не то же самое, что
# вычисление этого выражения.
# ПРАВДА
# 9. Семантические ошибки являются подвидом синтаксических ошибок.
# ЛОЖЬ
# 10. Деление на ноль вызывает ошибку времени выполнения
# ПРАВДА

# 3.8.З. Практические задания
# 1 . Напишите программу, в которой бы соединялись ваши имя и фамилия.
# Между ними должен быть пробел.

my_name = "Ekaterina" + " " + "Zyryanova"
print(my_name)

# 2. Прямоугольник имеет длину l и высоту h. Напишите код для 
# вычисления площади прямоугольника с высотой 8 и длиной 23. В коде
# должно быть присвоение значений переменным l и h, чтобы один и тот
# же код можно было использовать повторно. Для вычисления площади
# прямоугольника нужно его длину умножить на высоту.

l_ = 23
h_ = 8
S_ = l_ * h_
S_

# 3 . Чему равен квадрат числа 32 и куб числа 27? Напишите оператор, который 
# ответит на этот вопрос.
# Ответ: ** 2 и ** 3

# 4. Напишите приведенное ниже уравнение на Python. Присвойте числовые значе
# ния переменным и вычислите результат.
# (а + Ь)2 = a2 + Ь2 + 2аЬ

a_ = 5
b_ = 25
res = a_**2 + b_**2 + 2 * (a_ * b_)
print(res)

# 5 . Найдите длину своего имени, написав однострочный код на Python.

name = "Ekaterina"
print(len(name))

# 6. Нарисуйте прямоугольник, используя функцию print ( ) 

# print(' ' + '_' * 6 + ' ')
# print('|' + ' ' * 6 + '|')
# print('|' + ' ' * 6 + '|')
# print('|' + ' ' * 6 + '|')
# print('|' + ' ' * 6 + '|')
# print('|' + '_' * 6 + '|')

# 7. Нарисуйте букву «Р» с помощью простейшей геометрии и функции print ( ) 

# print(' ' + '_' * 4 + ' ')
# print('|' + ' ' * 4 + '\\')
# print('|' + ' ' * 4 + '|')
# print('|' + '_' * 4 + '/')
# print('|')
# print('|')

# 8. Создайте переменную Name и присвойте ей свое имя. Переменной Age присвойте
# свой возраст. Затем напишите оператор print ( ) , который выведет текст «меня
# зовут Name, а мой возраст - Age», с подставленными значениями ваших перемен
# ных. Значения Name и Age должны быть строкой и числом соответственно.

name = "Ekaterina"
age = 42
print(f"My name is {name}, my age - {age}")

# 9. Исправьте синтаксическую ошибку в следующих строках кода:
# words = [ cat, window, defenestrate]
# for w in words :
# 	print (w, len (w) )

words = ["cat", "window", "defenestrate"]
for w_ in words:
    print(w_, len(w_))

# 10. Исправьте синтаксическую ошибку в следующих строках кода:
# а, Ь = О, 1
# while а < 15 :
# 	print(a, end= ' , ' )
# 	а, Ь = Ь, а + Ь

a_, b_ = 0, 1
while a_ < 15:
    print(a_, end=", ")
    a_, b_ = b_, a_ + b_
