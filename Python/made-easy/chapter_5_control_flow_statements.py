# ---
# jupyter:
#   jupytext:
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.5'
#       jupytext_version: 1.16.4
#   kernelspec:
#     display_name: Python 3
#     language: python
#     name: python3
# ---

"""Операторы управления потоком."""

# 5.1. Операторы if
# 5.1.1. Простой оператор if
# Оператор if используется для проверки условия и, если условие истинно, выполня-
# ется связанный с оператором блок кода (называемый блоком if).
# Синтаксис: ключевое слово if, условие и двоеточие. Блок кода оператора if начи-
# нается со следующей строки и должен иметь отступ. Отступ сообщает Python
# о том, что этот блок кода предназначен для оператора if.
# if условие:
# код блока if
# конец блока if
# Строка конец блока if не пишется, блок оператора заканчивается сам по себе.
#
# 5.1.2. Оператор if-else
# В большинстве случаев бывает нужно что-то сделать, если условие if не выполни-
# лось, т.е. оказалось ложно. Для этого у нас есть оператор if-else. 
# Как и ранее, оператор if проверяет условие: если условие истинно, запускается
# блок if, в противном случае выполняется другой блок операторов (называемый
# блоком else). При этом блок else не является обязательным.
# if условие :
# код блока if
# else :
# код блока else
# Синтаксис: ключевое слово if, условие и двоеточие. Блок if начинается со сле
# дующей строки и должен иметь отступ. Отступ сообщает Python о том, что этот
# блок кода предназначен для оператора if. Затем идет ключевое слово else на новой
# строке без отступа, за ним следует двоеточие. Блок кода оператора else начинается
# со следующей строки с отступом. Отступ сообщает Python о том, что этот блок
# кода предназначен для оператора else.
#
# 5.1.3. Оператор if-elif-else
#
# Блоков elif может быть сколько угодно (или их может не быть вовсе), а блок else
# необязателен. Ключевое слово elif является сокращением от else if и позволяет
# избежать кода с огромными отступами.
# У операторов elif и else должно быть двоеточие в конце логической строки, а 
# после него следует соответствующий блок операторов (разумеется, с правильным от-
# стулом). Оператор if можно использовать внутри блока if другого оператора if
# это называется вложенный оператор if.
#
# 5.2. Оператор цикла for
# Циклы в программировании используются для многократного выполнения опреде-
# ленного блока кода. Цикл for в Python выполняет итерацию по элементам передан-
# ной последовательности (списка или строки) в том порядке, в котором они в этой
# последовательности представлены. 
# Обобщенно синтаксис выглядит следующим образом:
# for переменная in последовательность :
# код блок for
# Этот синтаксис похож на описание на английском языке и переводится как «для
# [каждого] значения, в списке». 
# 5.2.1. Цикл for с блоком else
# В цикле for также может быть необязательный блок else. Блок else выполняется,
# когда элементы в последовательности, перебираемой циклом for, заканчиваются.
# Если вам необходимо перебрать простую последовательность чисел, поможет
# встроенная функция range(). Она генерирует арифметическую прогрессию.
# При этом последняя точка никогда не является частью сгенерированной последова
# тельности, например функция range (10) генерирует 10 значений, представляющих
# собой допустимые индексы элементов последовательности длиной 10.
# Для перебора элементов последовательности можно комбинировать функции
# range() И len().

# a_ = ["Mary", "had", "a", "little", "lamb"]
# for i_ in range(len(a_)):
#     print(i_, a_[i_])

# Это объект, который поочередно возвращает элементы переданной ему последова-
# тельности, когда вы перебираете его, но при этом сам список не создается, экономя
# память. Подобрые объекты называются итерируемыми, т.е. их можно обрабатывать с по-
# мощью функций и конструкций, которые ожидают получить тип данных, у которого
# можно перебрать элементы, пока они не закончатся.
#
# 5.3. Цикл while
# Цикл while используется для перебора блока кода, пока выполняется заданное
# условие. Цикл while обычно используется в тех случаях, когда мы не знаем,
# сколько раз придется выполнить цикл.
#
# 5.4. Операторы break и continue
# 5.4.1. Оператор break
# Оператор break прерывает выполнение самого внутреннего цикла for или while.
# Операторы цикла могут иметь блок else, который выполняется, когда цикл завер-
# шается, перебрав все элементы (в случае цикла for) или когда условие становится
# ложным (в случае цикла while). Блок else не выполняется, когда цикл завершается
# оператором break.
#

numbers = [1, 2, 3, 4, 5]
for i_ in numbers:
    print(i_)
    break
else:
    print("this is end of the code!")
print("this line is outside the loop")

# Вместо 5 строк вывода выводится только одна строка в цикле. Оператор break
# остановил цикл for и не перевел его на следующую итерацию и пропустил блок else.

for n_ in range(2, 10):
    for x_ in range(2, n_):
        if n_ % x_ == 0:
            print(n_, "equals", x_, "*", n_ // x_)
            break
    else:
        # цикл прерывается, не найдя делителя
        print(n_, "is a prime number")

# 5.4.2. Оператор continue
# Оператор continue используется для пропуска части кода внутри цикла в пределах
# текущей итерации. Цикл не завершается, а сразу переходит на следующую
# итерацию.
# Оператор continue продолжает выполнение кода со следующей итерации цикла:

for alphabet in "python":
    if alphabet == "t":
        continue
    print(alphabet)
print("The end")

for num in range(2, 10):
    if num % 2 == 0:  # четное число
        print("Found an even number", num)
        continue
    print("Found a number", num)

# 5.5. Оператор pass
# Оператор pass ничего не делает. Его можно использовать, когда в данном месте
# программы оператор синтаксически требуется, но никаких действий в этом месте
# выполнять не нужно. Еще его можно использовать в качестве заполнителя для функции или тела условия
# в момент написания нового кода. Эrо позволяет сначала набросать шаблон кода на
# более абстрактном уровне. Интерпретатором этот оператор просто игнорируется.

# 5.6. Резюме
# 1. Изучила как можно управлять потоком кода.
# 2. Поняла, что без операторов if или циклов код может выполняться только сверху
# вниз, построчно и в неизменном порядке. 
# 3. Область действия оператора if поумолчанию включает в себя блок кода, следующий
# за оператором if и записанный с отступом. 
# 4. У всех строк должен быть одинаковый отступ после оператора if. 
# 5. Блок if может иметь, а может и не иметь блок else. 
# 6. В Python существуют два типа циклов: for и while. 
# 7. Оператор break прерывает выполнение цикла. 
# 8. Оператор continue пропускает выполнение следующих за ним выражений в цикле и
# начинает новую итерацию цикла. 

# 5.7.1 . Ответьте на вопросы
# 1. Каков порядок выполнения выражений в программе Python? Как его изменить?
# Ответ:
# Порядок выполнения вырожений - только сверху вниз построчно. Можно изменить
# с пощью операторов if, elif, else, а также break & continiues 
#
# 2. Что делают приведенные фрагменты кода?
# а) а = 50
# if а >= 100:
# print("Value of а is {}".format(а))
# Ответ:
# Код ничего не выводит, так как значение переменной не попадает в блок if
#
# б) а = 90
# if а <= 100 :
# print ("Value of а is {}".format(а))
# Ответ:
# Код выведет "Value of а is 90"
#
# в) х = 50
# if х >= 10 :
# print ("Value of х is {}".format(х))
# else :
# print ("Value of х is less than 10")
# Ответ:
# Код выведет "Value of х is 50"
#
#
# г) х = 5
# if х >= 10 :
# print ("Value of х is {}".format(х))
# else :
# print ("Value of х is less than 10")
# Ответ:
# Код выведет "Value of х is less than 10"
#
# д) х = 0
# while х < 5:
# 			print (х)
# 			х += 1
# Ответ:
# Код выведет
# 0
# 1
# 2
# 3
# 4
#
# е) for i in range (5, 25, 5)
# 						print(i)
# Ответ:
# Код выведет
# 5
# 10
# 15
# 20
#
# 3. Есть ли ошибки в приведенных фрагментах? Если да, то какие.
# а) а = 12
# if а == 10
# 				print ("а is equal to 10")
#
# Пропущено двоеточие после if а == 10
#
# б)а = 90, b = 15
# if а <= 100:
# 				print ("Value of а is less than 100")
# а = 90, b = 15 - неправильно написаны переменные
# a, b = 90, 15
# a = 90
# b = 15
#
# в) х = 22
# if х >= 10:
# 				print("x is bigger than 10")
# else
# 				print("х is less than 10")
# Пропущено двоеточие после else				
#
# г) х = 5
# if х >= 10 :
# print("Value of х is {}".format(x))
# else х < 10:
# print("Value of х is less than 10")
# После else не пишутся условия
#
# д) х = 5
# if х > 10:
# print ("Value of х is more than 10)
# else:
# print("Value of х is less than 10")
# elif х == 1 0 :
# print("Value of х is equal to 10")
# Сначала идет блок ifб потом elif и в конце else
#
# е) х = о
# while х < 5
# 				print (x)
# 				х =+ 1
# Пропущено двоеточие после while х < 5

# 5.7.2. Правда ил и ложь
# 1. Когда оператор if имеет значение Тrue, он выполняет лишь одну инструкцию
# в коде.
# Ложь
# 2. Блок кода сразу после оператора if - это блок if, который выполняется, когда
# условие возвращает True.
# Правда
# 3. Оператор else обязательно есть после каждого оператора if.
# Ложь
# 4. Оператор elif представляет собой комбинацию операторов else и if в одной
# строке.
# Правда
# 5 . Оператор else также может использоваться с циклом for.
# Правда
# 6. Объект в теле цикла for должен быть объектом-итератором.
# Правда
# 7. Цикл while выполняет блок кода, пока выполняется условие.
# Правда
# 8. Оператор break прерывает самый внутренний цикл for.
# Правда
# 9. Оператор continue используется для пропуска всех оставшихся итераций цикла.
# Ложь
# 10. Оператор pass ничего не делает.
# Правда

# 1. Трейдер хочет, чтобы программа проверяла, получил ли он прибыль или убы-
# ток по сделке. Напишите программу, в которой с клавиатуры вводится цена по-
# купки и продажи, а в ответ программа сообщает, получил ли трейдер прибыль
# или убыток. Программа также должна рассчитать сумму прибыли или убытка.

purchase_price = int(input("Введите стоимость покупки товара: "))
sale_price = int(input("Введите стоимость продажи товара: "))
difference = purchase_price - sale_price
if difference > 0:
    print(f"Трейдер получил прибыль в размере {difference}.")
else:
    print(f"Трейдер получил убыток в размере {difference}.")

# 2. Напишите программу, которая проверяет, является ли год, введенный с клавиа-
# туры, високосным.

year = int(input("Введите год: "))
if year % 4 == 0:
    print("Год високосный")
else:
    print("Год не високосный")

# 3. Трое сотрудников Самир, Правин и Мохит, вводят свой опыт работы с клавиа-
# туры. Напишите программу, которая определяет наиболее и наименее опытного
# из них.

# +
Samir = int(input("Введите опыт работы Самира: "))
Pravin = int(input("Введите опыт работы Правина: "))
Mohit = int(input("Введите опыт работы Мохита: "))

most_experienced = max(Samir, Pravin, Mohit)
least_experienced = min(Samir, Pravin, Mohit)

if Samir == most_experienced:
    print("Наиболее опытным сотрудником является Самир")
elif Samir == least_experienced:
    print("Наименее опытным сотрудником является Самир")
if Pravin == most_experienced:
    print("Наиболее опытным сотрудником является Правин")
elif Pravin == least_experienced:
    print("Наименее опытным сотрудником является Правин")
if Mohit == most_experienced:
    print("Наиболее опытным сотрудником является Мохит")
elif Mohit == least_experienced:
    print("Наименее опытным сотрудником является Мохит")
# -

# 4. Сумма трех углов треугольника составляет 180°. Напишите программу, которая
# проверяет, является ли фигура треугольником, если в качестве входных данных
# вводятся три угла.

# +
angle_1 = int(input("Угл первый: "))
angle_2 = int(input("Угл второй: "))
angle_3 = int(input("Угл третий: "))

if angle_1 + angle_2 + angle_3 == 180:
    print("Фигура - треугольник")
else:
    print("Фигура - не треугольник")
# -

# 5 . Даны три угла треугольника. Напишите программу, которая проверит, является
# ли он прямоугольным ( один из углов должен составлять 90°).

# +
angle_1 = int(input("Угл первый: "))
angle_2 = int(input("Угл второй: "))
angle_3 = int(input("Угл третий: "))

if angle_1 + angle_2 + angle_3 == 180:
    if angle_1 == 90 or angle_2 == 90 or angle_3 == 90:
        print("Треугольник прямоугольный")
    elif angle_1 != 90 or angle_2 != 90 or angle_3 != 90:
        print("Треугольник не прямоугольный")
else:
    print("Фигура - не треугольник")
# -

# 6. Сколько разных трехзначных чисел можно получить, используя цифры 1, 2 и 3
# в разных позициях? Напишите программу для генерации всех таких чисел (под
# сказка: используйте цикл for).

# +
count = 0

for i_ in range(1, 4):
    for j_ in range(1, 4):
        for k_ in range(1, 4):
            if i_ != j_ and j_ != k_ and i_ != k_:
                number = i_ * 100 + j_ * 10 + k_
                print(number)
                count += 1
print(f"Количество трехзначных чисел: {count}")
# -

# 7. Напишите код для вывода таблицы умножения любого заданного числа.

# +
number = int(input("Введите число: "))

for i_ in range(1, 11):
    print(f"{number} * {i_} = {number * i_}")
# -

# 8. Напишите программу для вывода всех простых чисел от 1 до 500.

dev = 0
for i_ in range(1, 501):
    for j_ in range(2, i_):
        if i_ % j_ == 0:
            dev += 1
    if dev == 0:
        print(i_)
    else:
        dev = 0

# 9. Выведите все числа, кратные 9, которые меньше 300 (подсказка: вы можете ис-
# пользовать функцию range()).

for i_ in range(1, 301):
    if i_ % 9 == 0:
        print(i_)

# 10. Машина в течение срока службы приносит годовой доход в размере 200 ООО руб.
# Сама она стоит 1 ООО ООО руб. в момент покупки и продается за 250 ООО руб.
# при утилизации. Вложив ту же сумму в другие инвестиционные инструменты,
# можно заработать 8 % годовых. Каков минимальный срок службы машины, при
# котором она станет более привлекательной по сравнению с альтернативными
# инвестициями?

# +
profit = 200000
purchase_price = 1000000
sale_price = 250000

difference = purchase_price - sale_price
payback_period = round(difference / profit)
print(payback_period, "года")
